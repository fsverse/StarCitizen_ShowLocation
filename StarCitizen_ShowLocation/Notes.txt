Benny Henge  (moves with yela...this is no good)
Coordinates: x:-19023187801.380684 y:-2613415056.200971 z:-1691.409382

Left  a nomad at: (shard 040)
Coordinates: x:-17067270873.669086 y:-2389924098.310352 z:-31250.017572


Chat GPT
----------------
using System;
using System.Text.RegularExpressions;

namespace Extract3DPointFromString
{
    class Program
    {
        static void Main(string[] args)
        {
            string input = "Coordinates: x:-17067270873.669086 y:-2389924098.310352 z:-31250.017572";
            Point3D point = ExtractPoint3D(input);

            Console.WriteLine("The extracted point is: (" + point.X + ", " + point.Y + ", " + point.Z + ")");
        }

        static Point3D ExtractPoint3D(string input)
        {
            Match match = Regex.Match(input, @"x:(.*?) y:(.*?) z:(.*?)$");

            if (!match.Success)
            {
                throw new Exception("The input string does not match the expected format");
            }

            double x = double.Parse(match.Groups[1].Value);
            double y = double.Parse(match.Groups[2].Value);
            double z = double.Parse(match.Groups[3].Value);

            return new Point3D(x, y, z);
        }
    }

    class Point3D
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Z { get; set; }

        public Point3D(double x, double y, double z)
        {
            X = x;
            Y = y;
            Z = z;
        }
    }
}


using System;

namespace CompassBearingBetween3DPoints
{
    class Program
    {
        static void Main(string[] args)
        {
            Point3D pointA = new Point3D(1, 2, 3);
            Point3D pointB = new Point3D(4, 5, 6);

            Console.WriteLine("The compass bearing between the two points is: " + Bearing(pointA, pointB) + " degrees");
        }

        static double Bearing(Point3D pointA, Point3D pointB)
        {
            double deltaX = pointB.X - pointA.X;
            double deltaY = pointB.Y - pointA.Y;

            double angleInRadians = Math.Atan2(deltaY, deltaX);
            double angleInDegrees = angleInRadians * 180 / Math.PI;

            return (angleInDegrees + 360) % 360;
        }
    }

    class Point3D
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Z { get; set; }

        public Point3D(double x, double y, double z)
        {
            X = x;
            Y = y;
            Z = z;
        }
    }
}
